name: Validate Resource Submission

on:
  issues:
    types: [opened, edited]

jobs:
  validate-submission:
    # Only run on issues with the resource-submission label
    if: contains(github.event.issue.labels.*.name, 'resource-submission')
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/
            THE_RESOURCES_TABLE.csv
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML requests python-dotenv
      
      - name: Parse and validate submission
        id: validate
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/parse_issue_form.py --validate > validation_result.json
          
          # Display validation status
          if grep -q '"valid": true' validation_result.json; then
            echo "Validation passed!"
          else
            echo "Validation failed!"
          fi
          
          # Show the result for debugging
          cat validation_result.json
      
      - name: Remove old validation comments
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get all comments
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number,
            });
            
            // Find and delete previous validation comments by this bot
            for (const comment of comments.data) {
              if (comment.user.type === 'Bot' && comment.body.includes('## ü§ñ Validation Results')) {
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: comment.id,
                });
              }
            }
      
      - name: Post validation results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const validation_result = JSON.parse(fs.readFileSync('validation_result.json', 'utf8'));
            
            let comment_body = '## ü§ñ Validation Results\n\n';
            
            if (validation_result.valid) {
              comment_body += '‚úÖ **All validation checks passed!**\n\n';
              comment_body += 'Your submission is ready for review by a maintainer.\n\n';
              comment_body += '### Validated Data:\n';
              comment_body += '```json\n';
              comment_body += JSON.stringify(validation_result.data, null, 2);
              comment_body += '\n```\n';
            } else {
              comment_body += '‚ùå **Validation failed**\n\n';
              comment_body += 'Please fix the following issues and edit your submission:\n\n';
              
              for (const error of validation_result.errors) {
                comment_body += `- ‚ùó ${error}\n`;
              }
              
              if (validation_result.warnings && validation_result.warnings.length > 0) {
                comment_body += '\n### Warnings:\n';
                for (const warning of validation_result.warnings) {
                  comment_body += `- ‚ö†Ô∏è ${warning}\n`;
                }
              }
              
              comment_body += '\n**Note:** You can edit your issue to fix these problems, and validation will run again automatically.';
            }
            
            comment_body += '\n\n---\n';
            comment_body += '<sub>This comment is automatically updated when you edit the issue.</sub>';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment_body
            });
      
      - name: Update issue labels
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const validation_result = JSON.parse(fs.readFileSync('validation_result.json', 'utf8'));
            const validation_passed = validation_result.valid;
            
            // Get current labels
            const { data: issue } = await github.rest.issues.get({
              owner,
              repo,
              issue_number,
            });
            
            let labels = issue.labels.map(label => label.name);
            
            // Remove validation-related labels
            labels = labels.filter(label => 
              label !== 'validation-passed' && 
              label !== 'validation-failed' && 
              label !== 'pending-validation'
            );
            
            // Add appropriate label
            if (validation_passed) {
              labels.push('validation-passed');
            } else {
              labels.push('validation-failed');
            }
            
            // Update labels
            await github.rest.issues.setLabels({
              owner,
              repo,
              issue_number,
              labels,
            });
      
      - name: Cleanup
        if: always()
        run: |
          rm -f validation_result.json
